// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id           String         @id @default(uuid())
  title        String
  description  String?
  inStock      Int            @default(0)
  price        Float          @default(0)
  sizes        Size[]         @default([])
  slug         String         @unique
  tags         String[]       @default([])
  gender       Gender         @default(unisex)
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  user
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  address       UserAddress?
  Order         Order[]
}

model Country {
  id           String         @id
  name         String
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  city       String
  postalCode String
  email      String
  phone      String
  country    Country @relation(fields: [countryId], references: [id])
  countryId  String
  isDefault  Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @unique

  @@index([userId])
  @@index([email])
}

enum Status {
  pending
  paid
  delivered
  canceled
}

// Order de compras
model Order {
  id           String        @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int           @default(0)
  isPaid       Boolean       @default(false)
  paidAt       DateTime?
  deliveredAt  DateTime?
  status       Status        @default(pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // Relaciones
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  size      Size
  // Relaciones
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([orderId])
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  // Relaciones
  country    Country @relation(fields: [countryId], references: [id])
  countryId  String
  Order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String  @unique

  @@index([orderId])
}
